---
version: '3'

networks:
  app-tier:
    driver: bridge

services:
  zookeeper:
    image: "bitnami/zookeeper:latest"
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-tier

  kafka:
    image: "bitnami/kafka:latest"
    ports:
      - "9093:9093"
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
      # - .broker/server.properties:/bitnami/kafka/config/server.properties
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://0.0.0.0:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - app-tier
    depends_on:
      - zookeeper

  database:
    image: 'postgres:latest'
    ports:
      - 5432:5432
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-q",
          "-d",
          "postgres",
          "-U",
          "root"
        ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      APP_DB_USER: "${APP_DB_USER}"
      APP_DB_PASS: "${APP_DB_PASS}"
      APP_DB_NAME: "${APP_DB_NAME}"
    volumes:
      - ./database/data/:/var/lib/postgresql/data/
      - ./database/01-init.sh:/docker-entrypoint-initdb.d/01-init.sh
    networks:
      - app-tier

  producer:
    build: './producer'
    networks:
      - app-tier
    depends_on:
      - kafka
    # consumer:
    # build: './consumer'

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
